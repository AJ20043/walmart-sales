--  CREATING DATABASE  --

CREATE DATABASE WALMART;
USE WALMART;

-- CREATING REFERENCE TABLE  --

CREATE TABLE REFERENCE(
	INVOICE_ID VARCHAR(30) PRIMARY KEY,
    BRANCH VARCHAR(5) NOT NULL,
    CITY VARCHAR(30) NOT NULL,
    CUSTOMER_TYPE VARCHAR(30) NOT NULL,
    GENDER VARCHAR(30) NOT NULL,
    PRODUCT_LINE VARCHAR(100) NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    QUANTITY INT NOT NULL,
    5PERCENT_TAX FLOAT(6,4) NOT NULL,
    TOTAL DECIMAL(12, 4) NOT NULL,
    DATE DATE NOT NULL,
    TIME TIME NOT NULL,
    PAYMENT VARCHAR(15) NOT NULL,
    COGS DECIMAL(10,2) NOT NULL,
    GROSS_MARGIN_PERCENT FLOAT(11,9),
    GROSS_INCOME DECIMAL(12, 4),
    RATING FLOAT(2, 1)
);

--  DISPLAY ALL DATA FROM REFERENCE TABLE  --
SELECT * FROM REFERENCE;

--  SHOWING HOW MANY DATA ARE THERE IN MY TABLE  --
SELECT COUNT(*) FROM REFERENCE;

--  TIME_OF_DAY  --

SELECT BRANCH, CITY, TIME,
CASE
WHEN time BETWEEN "00:00:00" AND "12:00:00"
THEN "MORNING"
WHEN time BETWEEN "12:00:01" AND "16:00:00"
THEN "AFTERNOON"
ELSE "EVENING"
END AS TIME_OF_DAY
FROM REFERENCE;

--  ADDING EXTRA COLUMN  --

ALTER TABLE REFERENCE
ADD COLUMN TIME_OF_DAY varchar(20) AFTER TIME;

--  INSERTING VALUES  --

update REFERENCE set TIME_OF_DAY=CASE
WHEN TIME BETWEEN "00:00:00" AND "12:00:00"
THEN "Morning"
WHEN TIME BETWEEN "12:00:01" AND "16:00:00"
THEN "Afternoon"
ELSE "Evening"
END;

SELECT * FROM REFERENCE;

--  DAY_NAME  --

SELECT
	DATE,
	DAYNAME(DATE) AS DAY
FROM REFERENCE;

--  ADDING DAYNAME COLUMN  --

ALTER TABLE REFERENCE 
ADD COLUMN DAY  VARCHAR(15) AFTER TIME_OF_DAY;

UPDATE REFERENCE
SET DAY=DAYNAME(DATE);

--  ADDING MONTH COLUMN  --

SELECT DATE,MONTHNAME(DATE)
FROM REFERENCE;

ALTER TABLE REFERENCE
ADD MONTH VARCHAR(15) AFTER DAY;

UPDATE REFERENCE
SET MONTH=MONTHNAME(DATE);

SELECT * FROM REFERENCE;

-- SEPARATING REFERENCE TABLE  --
--  CUSTOMER TABLE  --

CREATE TABLE CUSTOMERS(
 CUST_ID INT PRIMARY KEY AUTO_INCREMENT,
 CUSTOMER_TYPE VARCHAR(30) NOT NULL,
 GENDER VARCHAR(30) NOT NULL
);

INSERT INTO CUSTOMERS(CUSTOMER_TYPE,GENDER) 
SELECT DISTINCT CUSTOMER_TYPE,GENDER 
FROM REFERANCE;
SELECT * FROM CUSTOMERS;


-- BRANCH TABLE  --
CREATE TABLE BRANCH(
BRANCH VARCHAR(3) PRIMARY KEY,
CITY VARCHAR(30) NOT NULL
);

INSERT INTO BRANCH
SELECT DISTINCT BRANCH,CITY FROM REFERANCE
ORDER BY BRANCH;
SELECT * FROM BRANCH;

-- CREATING SALES TABLE  --

CREATE TABLE SALES
	(INVOICE_ID VARCHAR(30) PRIMARY KEY,
	BRANCH VARCHAR(3) NOT NULL,
	CUST_ID INT,
	PRODUCT_LINE VARCHAR(100) NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    QUANTITY INT NOT NULL,
    5PERCENT_TAX FLOAT(6,4) NOT NULL,
    TOTAL DECIMAL(12, 4) NOT NULL,
    DATE DATE NOT NULL,
    TIME TIME NOT NULL,
    TIME_OF_DAY varchar(20),
    DAY  VARCHAR(15),
    MONTH VARCHAR(15),
    PAYMENT VARCHAR(15) NOT NULL,
    COGS DECIMAL(10,2) NOT NULL,
    GROSS_MARGIN_PERCENT FLOAT(11,9),
    GROSS_INCOME DECIMAL(12, 4),
    RATING FLOAT(2, 1),
    FOREIGN KEY(CUST_ID) REFERENCES CUSTOMERS(CUST_ID),
    CONSTRAINT BRANCH_ID FOREIGN KEY(BRANCH)
	REFERENCES BRANCH(BRANCH)
);

SELECT * FROM CUSTOMERS;
SELECT * FROM SALES;


INSERT INTO SALES
SELECT INVOICE_ID,BRANCH,
	CASE
	WHEN CUSTOMER_TYPE='NORMAL' AND GENDER='MALE' THEN 1
    WHEN CUSTOMER_TYPE='MEMBER' AND GENDER='FEMALE' THEN 2
	WHEN CUSTOMER_TYPE='MEMBER' AND GENDER='MALE' THEN 3
	WHEN CUSTOMER_TYPE='NORMAL' AND GENDER='FEMALE' THEN 4
	END AS CUST_ID,
	PRODUCT_LINE,UNIT_PRICE,QUANTITY,5PERCENT_TAX,
	TOTAL,DATE,TIME,TIME_OF_DAY,DAY,MONTH,PAYMENT,
    COGS,GROSS_MARGIN_PERCENT,GROSS_INCOME,RATING
FROM REFERENCE;

SELECT * FROM SALES;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- DISPLAYING ALL TABLES  --

SELECT * FROM BRANCH;
SELECT * FROM CUSTOMERS;
SELECT * FROM SALES;

--  DISPLAYING COUNT OF PURCHASES  --

SELECT COUNT(*) AS 'NO OF PURCHASES' FROM SALES;

--  COUNT OF SALES TABLE  --
--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR BRANCH  --
--  ROLLUP ARE USED TO SHOW THE TOTAL WITH EMPTY DATA IN THE OTHER COLUMNS  --
 
SELECT BRANCH,COUNT(INVOICE_ID)
FROM SALES
GROUP BY BRANCH WITH ROLLUP;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR CUST_ID  --

SELECT CUST_ID,COUNT(INVOICE_ID)
FROM SALES
GROUP BY CUST_ID WITH ROLLUP;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR PRODUCT  --

SELECT PRODUCT_LINE,COUNT(INVOICE_ID)
FROM SALES
GROUP BY PRODUCT_LINE WITH ROLLUP;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR DATE  --

SELECT DATE,COUNT(INVOICE_ID)
FROM SALES
GROUP BY DATE
ORDER BY DATE;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR TIME  --

SELECT TIME_OF_DAY,COUNT(INVOICE_ID)
FROM SALES 
GROUP BY TIME_OF_DAY WITH ROLLUP;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR DAY  --

SELECT DAY,COUNT(INVOICE_ID)
FROM SALES 
GROUP BY DAY WITH ROLLUP;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR MONTH  --

SELECT MONTH,COUNT(INVOICE_ID)
FROM SALES 
GROUP BY MONTH WITH ROLLUP;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR PAYMENT TYPE  --

SELECT PAYMENT,COUNT(INVOICE_ID)
FROM SALES 
GROUP BY PAYMENT WITH ROLLUP;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR RATING  --

SELECT RATING,COUNT(INVOICE_ID)
FROM SALES 
GROUP BY RATING
ORDER BY RATING DESC;

--  MIN OF THE TABLE  --
--  LOW RATING FOR PODUCT_LINE NEED TO IMPROVE  --
 
 SELECT PRODUCT_LINE,MIN(RATING) AS RATING
 FROM SALES
 GROUP BY PRODUCT_LINE
 ORDER BY RATING;
 
SELECT * FROM SALES;

--  MAX OF SALES TABLE  --

SELECT MAX(BRANCH) AS 'HIGH SALES' FROM SALES;
SELECT * FROM BRANCH;  -- REFERENCE  --

SELECT MAX(CUST_ID) AS 'HIGHLY PURCHASED' FROM SALES;
SELECT * FROM CUSTOMERS;  --  REFERENCES  --

SELECT MAX(PRODUCT_LINE)
FROM SALES;

--  HIGH RATING FOR PODUCT_LINE  --
 
 SELECT PRODUCT_LINE,MAX(RATING) AS RATING
 FROM SALES
 GROUP BY PRODUCT_LINE
 ORDER BY RATING;
 
 --  MAX AND MIN OF UNIT PRICE  --
 
 SELECT PRODUCT_LINE, MAX(UNIT_PRICE) AS UNIT_PRICE
 FROM SALES
 GROUP BY PRODUCT_LINE
ORDER BY UNIT_PRICE DESC;
 
  SELECT PRODUCT_LINE, MIN(UNIT_PRICE) AS UNIT_PRICE
 FROM SALES
 GROUP BY PRODUCT_LINE
ORDER BY UNIT_PRICE;
 
--  HIGH PRODUCT SOLD BRANCH  --
                                                                    
SELECT BRANCH, SUM(TOTAL) AS TOTAL
FROM SALES
GROUP BY BRANCH
ORDER BY TOTAL DESC;

--  TOTAL INCOME PER MONTH  --

SELECT MONTH,SUM(TOTAL)
FROM SALES
GROUP BY MONTH WITH ROLLUP;

--  MONTHLY GROSS INCOME  --

SELECT MONTH, SUM(GROSS_INCOME) AS 'MONTHLY GROSS INCOME'
FROM SALES
GROUP BY MONTH WITH ROLLUP;

--  MONTHLY COGS  --

SELECT MONTH, SUM(COGS) AS 'MONTHLY COGS'
FROM SALES
GROUP BY MONTH WITH ROLLUP;

--  AVERAGE INCOME PER DAY  --
                                                                    
SELECT MONTH,AVG(TOTAL)
FROM SALES
GROUP BY MONTH WITH ROLLUP;

--  WE CAN CONTACT THEM AND ASK ABOUT THEIR EXPERIENCE TO IMPROVE OURSELVES  --

SELECT INVOICE_ID, BRANCH, RATING FROM SALES
WHERE RATING = (SELECT MIN(RATING) FROM SALES);

--  NO. OF PURCHASE MADE PER DAY ON A MONTH  --

SELECT MONTH, DAY, COUNT(INVOICE_ID) AS COUNT
FROM SALES
GROUP BY MONTH, DAY WITH ROLLUP
ORDER BY COUNT;

--  NO. OF PURCHASE MADE PER DAY ON TIME OF DAY  --

SELECT DAY, TIME_OF_DAY, COUNT(INVOICE_ID) AS COUNT
FROM SALES
GROUP BY DAY, TIME_OF_DAY WITH ROLLUP
ORDER BY COUNT;

SELECT RATING,COUNT(INVOICE_ID)
FROM SALES 
GROUP BY RATING
HAVING RATING<5.0
ORDER BY RATING DESC;

--  USING IN CLAUSE  --
SELECT * FROM SALES
WHERE PRODUCT_LINE IN ('Sports and travel','Electronic accessories');    
--  SAME AS ABOVE CODE  --
SELECT * FROM SALES
WHERE PRODUCT_LINE LIKE 'S%' OR PRODUCT_LINE LIKE 'E%';

-- SHOWING WITHIN A SPECIFIC DATE  --
SELECT * FROM SALES 
WHERE DATE BETWEEN '2019-01-28' AND '2019-02-28'
ORDER BY DATE;

--  HIGHEST RATING COUNT  --
SELECT RATING,COUNT(INVOICE_ID) COUNT
FROM SALES 
GROUP BY RATING
ORDER BY COUNT DESC
LIMIT 1;

SELECT * FROM SALES;

--  FIRST FIVE TOTAL  --
SELECT INVOICE_ID, TOTAL
FROM SALES
ORDER BY TOTAL DESC
LIMIT 5;

--  NEXT FIVE TOTAL  --
SELECT INVOICE_ID, TOTAL
FROM SALES
ORDER BY TOTAL DESC
LIMIT 5,5;

--  SHOWING BRANCH WITH INVOICE DETAILS  --
SELECT INVOICE_ID,BRANCH.BRANCH,CITY FROM SALES
INNER JOIN BRANCH
ON SALES.BRANCH=BRANCH.BRANCH;

-- I WANT TO SHOW DETAILS OF BRANCH AND CUST_ID WITH INVOICE_ID  --
SELECT INVOICE_ID,BRANCH.BRANCH,CITY,
CUSTOMERS.CUST_ID,CUSTOMER_TYPE,GENDER
FROM SALES
JOIN BRANCH
ON SALES.BRANCH=BRANCH.BRANCH
JOIN CUSTOMERS
ON SALES.CUST_ID=CUSTOMERS.CUST_ID
ORDER BY BRANCH;

--  IF I WANT TO RUN THE CODE REPEATEDLY
--  I WILL SAVE IT TO STORED PROCEDURE  --
DELIMITER &&
CREATE PROCEDURE DETAILS()
BEGIN 
SELECT INVOICE_ID,BRANCH.BRANCH,CITY,
CUSTOMERS.CUST_ID,CUSTOMER_TYPE,GENDER
FROM SALES
JOIN BRANCH
ON SALES.BRANCH=BRANCH.BRANCH
JOIN CUSTOMERS
ON SALES.CUST_ID=CUSTOMERS.CUST_ID
ORDER BY BRANCH;
END &&
DELIMITER ;
--  WHENEVER I WANT TO SHOW THE BRIEF DETAILS
--  I WILL CALL THE PROCEDURE
-- I DON'T NEED TO WRITE THE WHOLE CODE AGAIN  --

CALL DETAILS();

--  TRIGGERS  --

ALTER TABLE BRANCH
ADD COUNT INT;

UPDATE BRANCH
SET COUNT= CASE
WHEN BRANCH='A' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='A')
WHEN BRANCH='B' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='B')
WHEN BRANCH='C' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='C')
END;

SELECT * FROM BRANCH;

CREATE TRIGGER BRANCH_COUNT
AFTER INSERT
ON SALES
FOR EACH ROW
UPDATE BRANCH
SET COUNT= CASE
WHEN BRANCH='A' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='A')
WHEN BRANCH='B' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='B')
WHEN BRANCH='C' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='C')
END;
 
INSERT INTO SALES
VALUES ('122-32-1223','A',2,'Food and beverages',34.12,6,12.4423,334.4343,'2019-03-31','12:12:00','Evening','Monday','March','cash',210.32,4.234324224,16.2343,8.9);

-- CREATING TRIGGER TO WORK IN DELETE CLAUSE  --
CREATE TRIGGER BRANCH_DEL_COUNT
AFTER DELETE
ON SALES
FOR EACH ROW
UPDATE BRANCH
SET COUNT= CASE
WHEN BRANCH='A' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='A')
WHEN BRANCH='B' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='B')
WHEN BRANCH='C' THEN (SELECT COUNT(BRANCH) FROM SALES WHERE BRANCH='C')
END;

DELETE FROM SALES WHERE INVOICE_ID='122-32-1223';
SELECT * FROM BRANCH;

--  VIEW  --
SELECT * FROM SALES;

CREATE VIEW DETAILS AS
SELECT INVOICE_ID,BRANCH,
CUST_ID,PRODUCT_LINE,UNIT_PRICE,
QUANTITY,5PERCENT_TAX,TOTAL,DATE,TIME,PAYMENT
FROM SALES;

SELECT * FROM DETAILS;  

--  ON DELETE  --
INSERT INTO BRANCH
VALUES('D','Taunggyi',NULL);

ALTER TABLE SALES
DROP FOREIGN KEY BRANCH_ID;

ALTER TABLE SALES
MODIFY BRANCH VARCHAR(3);

ALTER TABLE SALES 
ADD CONSTRAINT BRANCH_ID 
FOREIGN KEY(BRANCH) REFERENCES BRANCH(BRANCH)
ON DELETE SET NULL;

INSERT INTO SALES
VALUES ('122-32-1223','D',2,'Food and beverages',34.12,6,12.4423,334.4343,'2019-03-31','12:12:00','Evening','Monday','March','cash',210.32,4.234324224,16.2343,8.9);

SELECT * FROM SALES
WHERE BRANCH='D';
DELETE FROM BRANCH
WHERE BRANCH='D';
SELECT * FROM SALES
WHERE INVOICE_ID='122-32-1223';

INSERT INTO BRANCH
VALUES('D','Taunggyi',NULL);

ALTER TABLE SALES
DROP FOREIGN KEY BRANCH_ID;

ALTER TABLE SALES 
ADD CONSTRAINT BRANCH_ID 
FOREIGN KEY(BRANCH) REFERENCES BRANCH(BRANCH)
ON DELETE CASCADE;

UPDATE SALES SET BRANCH='D'
WHERE INVOICE_ID='122-32-1223';

DELETE FROM BRANCH
WHERE BRANCH='D';
SELECT * FROM SALES
WHERE INVOICE_ID='122-32-1223';

