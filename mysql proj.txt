--  CREATING DATABASE  --

CREATE DATABASE WALMART;
USE WALMART;

-- CREATING REFERENCE TABLE  --

CREATE TABLE REFERENCE(
	INVOICE_ID VARCHAR(30) PRIMARY KEY,
    BRANCH VARCHAR(5) NOT NULL,
    CITY VARCHAR(30) NOT NULL,
    CUSTOMER_TYPE VARCHAR(30) NOT NULL,
    GENDER VARCHAR(30) NOT NULL,
    PRODUCT_LINE VARCHAR(100) NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    QUANTITY INT NOT NULL,
    5PERCENT_TAX FLOAT(6,4) NOT NULL,
    TOTAL DECIMAL(12, 4) NOT NULL,
    DATE DATE NOT NULL,
    TIME TIME NOT NULL,
    PAYMENT VARCHAR(15) NOT NULL,
    COGS DECIMAL(10,2) NOT NULL,
    GROSS_MARGIN_PERCENT FLOAT(11,9),
    GROSS_INCOME DECIMAL(12, 4),
    RATING FLOAT(2, 1)
);

--  DISPLAY ALL DATA FROM REFERENCE TABLE  --
SELECT * FROM REFERENCE;

--  SHOWING HOW MANY DATA ARE THERE IN MY TABLE  --
SELECT COUNT(*) FROM REFERENCE;

--  TIME_OF_DAY  --

SELECT BRANCH, CITY, TIME,
CASE
WHEN time BETWEEN "00:00:00" AND "12:00:00"
THEN "MORNING"
WHEN time BETWEEN "12:00:01" AND "16:00:00"
THEN "AFTERNOON"
ELSE "EVENING"
END AS TIME_OF_DAY
FROM REFERENCE;

--  ADDING EXTRA COLUMN  --

ALTER TABLE REFERENCE
ADD COLUMN TIME_OF_DAY varchar(20) AFTER TIME;

--  INSERTING VALUES  --

update REFERENCE set TIME_OF_DAY=CASE
WHEN TIME BETWEEN "00:00:00" AND "12:00:00"
THEN "Morning"
WHEN TIME BETWEEN "12:00:01" AND "16:00:00"
THEN "Afternoon"
ELSE "Evening"
END;

SELECT * FROM REFERENCE;

--  DAY_NAME  --

SELECT
	DATE,
	DAYNAME(DATE) AS DAY
FROM REFERENCE;

--  ADDING DAYNAME COLUMN  --

ALTER TABLE REFERENCE 
ADD COLUMN DAY  VARCHAR(15) AFTER TIME_OF_DAY;

UPDATE REFERENCE
SET DAY=DAYNAME(DATE);

--  ADDING MONTH COLUMN  --

SELECT DATE,MONTHNAME(DATE)
FROM REFERENCE;

ALTER TABLE REFERENCE
ADD MONTH VARCHAR(15) AFTER DAY;

UPDATE REFERENCE
SET MONTH=MONTHNAME(DATE);

SELECT * FROM REFERENCE;

-- SEPARATING REFERENCE TABLE  --
--  CUSTOMER TABLE  --

CREATE TABLE CUSTOMERS(
 CUST_ID INT PRIMARY KEY AUTO_INCREMENT,
 CUSTOMER_TYPE VARCHAR(30) NOT NULL,
 GENDER VARCHAR(30) NOT NULL
);

INSERT INTO CUSTOMERS(CUSTOMER_TYPE,GENDER) 
SELECT DISTINCT CUSTOMER_TYPE,GENDER 
FROM REFERANCE;
SELECT * FROM CUSTOMERS;


-- BRANCH TABLE  --
CREATE TABLE BRANCH(
BRANCH VARCHAR(3) PRIMARY KEY,
CITY VARCHAR(30) NOT NULL
);

INSERT INTO BRANCH
SELECT DISTINCT BRANCH,CITY FROM REFERANCE
ORDER BY BRANCH;
SELECT * FROM BRANCH;

-- CREATING SALES TABLE  --

CREATE TABLE SALES
	(INVOICE_ID VARCHAR(30) PRIMARY KEY,
	BRANCH VARCHAR(3) NOT NULL,
	CUST_ID INT,
	PRODUCT_LINE VARCHAR(100) NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    QUANTITY INT NOT NULL,
    5PERCENT_TAX FLOAT(6,4) NOT NULL,
    TOTAL DECIMAL(12, 4) NOT NULL,
    DATE DATE NOT NULL,
    TIME TIME NOT NULL,
    TIME_OF_DAY varchar(20),
    DAY  VARCHAR(15),
    MONTH VARCHAR(15),
    PAYMENT VARCHAR(15) NOT NULL,
    COGS DECIMAL(10,2) NOT NULL,
    GROSS_MARGIN_PERCENT FLOAT(11,9),
    GROSS_INCOME DECIMAL(12, 4),
    RATING FLOAT(2, 1),
    FOREIGN KEY(CUST_ID) REFERENCES CUSTOMERS(CUST_ID),
    CONSTRAINT BRANCH_ID FOREIGN KEY(BRANCH)
	REFERENCES BRANCH(BRANCH)
);

SELECT * FROM CUSTOMERS;
SELECT * FROM SALES;


INSERT INTO SALES
SELECT INVOICE_ID,BRANCH,
	CASE
	WHEN CUSTOMER_TYPE='NORMAL' AND GENDER='MALE' THEN 1
    WHEN CUSTOMER_TYPE='MEMBER' AND GENDER='FEMALE' THEN 2
	WHEN CUSTOMER_TYPE='MEMBER' AND GENDER='MALE' THEN 3
	WHEN CUSTOMER_TYPE='NORMAL' AND GENDER='FEMALE' THEN 4
	END AS CUST_ID,
	PRODUCT_LINE,UNIT_PRICE,QUANTITY,5PERCENT_TAX,
	TOTAL,DATE,TIME,TIME_OF_DAY,DAY,MONTH,PAYMENT,
    COGS,GROSS_MARGIN_PERCENT,GROSS_INCOME,RATING
FROM REFERENCE;

SELECT * FROM SALES;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- DISPLAYING ALL TABLES  --

SELECT * FROM BRANCH;
SELECT * FROM CUSTOMERS;
SELECT * FROM SALES;

--  DISPLAYING COUNT OF PURCHASES  --

SELECT COUNT(*) AS 'NO OF PURCHASES' FROM SALES;

--  COUNT OF SALES TABLE  --
--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR BRANCH  --

SELECT BRANCH,COUNT(BRANCH)
FROM SALES
GROUP BY BRANCH;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR CUST_ID  --

SELECT CUST_ID,COUNT(CUST_ID)
FROM SALES
GROUP BY CUST_ID;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR PRODUCT  --

SELECT PRODUCT_LINE,COUNT(PRODUCT_LINE)
FROM SALES
GROUP BY PRODUCT_LINE;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR DATE  --

SELECT DATE,COUNT(DATE)
FROM SALES
GROUP BY DATE
ORDER BY DATE;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR TIME  --

SELECT TIME_OF_DAY,COUNT(TIME_OF_DAY)
FROM SALES 
GROUP BY TIME_OF_DAY;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR DAY  --

SELECT DAY,COUNT(DAY)
FROM SALES 
GROUP BY DAY;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR MONTH  --

SELECT MONTH,COUNT(MONTH)
FROM SALES 
GROUP BY MONTH;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR PAYMENT TYPE  --

SELECT PAYMENT,COUNT(PAYMENT)
FROM SALES 
GROUP BY PAYMENT;

--  FILTERING COUNT OF PURCHASES MADE IN PARTICULAR RATING  --

SELECT RATING,COUNT(RATING)
FROM SALES 
GROUP BY RATING
ORDER BY RATING DESC;

--  MIN OF THE TABLE  --
--  LOW RATING FOR PODUCT_LINE NEED TO IMPROVE  --
 
 SELECT PRODUCT_LINE,MIN(RATING) AS RATING
 FROM SALES
 GROUP BY PRODUCT_LINE
 ORDER BY RATING;
 
SELECT * FROM SALES;

--  MAX OF SALES TABLE  --

SELECT MAX(BRANCH) AS 'HIGH SALES' FROM SALES;
SELECT * FROM BRANCH;  -- REFERENCE  --

SELECT MAX(CUST_ID) AS 'HIGHLY PURCHASED' FROM SALES;
SELECT * FROM CUSTOMERS;  --  REFERENCES  --

SELECT MAX(PRODUCT_LINE)
FROM SALES;

--  HIGH RATING FOR PODUCT_LINE  --
 
 SELECT PRODUCT_LINE,MAX(RATING) AS RATING
 FROM SALES
 GROUP BY PRODUCT_LINE
 ORDER BY RATING;
 
--  HIGH PRODUCT SOLD BRANCH  --
                                                                    
SELECT BRANCH, SUM(TOTAL) AS TOTAL
FROM SALES
GROUP BY BRANCH
ORDER BY TOTAL DESC;

--  TOTAL INCOME PER MONTH  --

SELECT MONTH,SUM(TOTAL)
FROM SALES
GROUP BY MONTH;

--  AVERAGE INCOME PER DAY  --
                                                                    
SELECT MONTH,AVG(TOTAL)
FROM SALES
GROUP BY MONTH;

SELECT *FROM SALES;    
